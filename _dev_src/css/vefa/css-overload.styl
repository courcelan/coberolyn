// 2.0 CSS Overloads
// overloads general css statements with helpful features,such as rem()

// ==========================================================================
// 2.1 Padding
//
// overload padding to produce REM values from PX values. If a PCT is assigned,
// will not be converted to REMs
//
// @args - pixel values for each direction
//
// Example:
//
//  padding: v1 v2 v3 v4
//
//
padding(args...)
  if length(args) == 1
    padding: rem(args[0])
  if length(args) == 2
    padding: rem(args[0]) rem(args[1])
  if length(args) == 3
    padding: rem(args[0]) rem(args[1]) rem(args[2])
  if length(args) == 4
    padding: rem(args[0]) rem(args[1]) rem(args[2]) rem(args[3])



// ==========================================================================
// 2.2 Single-position padding
//
// overload padding to produce REM values from PX values. If a PCT is assigned,
// will not be converted to REMs
//
// @arg - pixel value
//
// Example:
//
//  padding-top: v1
//
//
padding-top(arg)
  padding-top: rem(arg)

padding-right(arg)
  padding-right: rem(arg)

padding-bottom(arg)
  padding-bottom: rem(arg)

padding-left(arg)
  padding-left: rem(arg)



// ==========================================================================
// 2.3 Margin
//
// overload margin to produce REM values from PX values. If a PCT is assigned,
// will not be converted to REMs
//
// @args - pixel values for each direction
//
// Example:
//
//  margin: v1 v2 v3 v4
//
//
margin(args...)
  if length(args) == 1
    margin: rem(args[0])
  if length(args) == 2
    margin: rem(args[0]) rem(args[1])
  if length(args) == 3
    margin: rem(args[0]) rem(args[1]) rem(args[2])
  if length(args) == 4
    margin: rem(args[0]) rem(args[1]) rem(args[2]) rem(args[3])



// ==========================================================================
// 2.4 Single-position margin
//
// overload margin to produce REM values from PX values. If a PCT is assigned,
// will not be converted to REMs
//
// @arg - pixel value
//
// Example:
//
//  margin-top: v1
//
//
margin-top(arg)
  margin-top: rem(arg)

margin-right(arg)
  margin-right: rem(arg)

margin-bottom(arg)
  margin-bottom: rem(arg)

margin-left(arg)
  margin-left: rem(arg)



// ==========================================================================
// 2.5 Width
//
// overload width to produce REM values from PX values. If a PCT is assigned,
// will not be converted to REMs
//
// @arg - pixel value
//
// Example:
//
//  width: v1
//
//
width(arg)
  width: rem(arg)



// ==========================================================================
// 2.6 Height
//
// overload height to produce REM values from PX values. If a PCT is assigned,
// will not be converted to REMs
//
// @arg - pixel value
//
// Example:
//
//  height: v1
//
//
height(arg)
  height: rem(arg)



// ==========================================================================
// 2.7 Border
//
// Quick method to just supply color for 1px solid line. Otherwise display
// border property as usual. Borders are not converted to REMs, as design
// typically dicates a need for same widths
//
// @args - color or traditional border declaration
//
// Example:
//
//    border: red // returns border: 1px solid red
//
//
border()
  len = length(arguments)
  border: 0 if arguments == 0
  border: 1px solid arguments if len == 1 && arguments != 0
  border: arguments if len > 1



// ==========================================================================
// 2.8 Single position border
//
// Quick method to just supply color for 1px solid line. Otherwise display
// border property as usual. Borders are not converted to REMs, as design
// typically dicates a need for same widths
//
// @args - color or traditional border declaration
//
// Example:
//
//    border-top: red // returns border-top: 1px solid red
//
//
border-top()
  len = length(arguments)
  border-top: 0 if arguments == 0
  border-top: 1px solid arguments if len == 1 && arguments != 0
  border-top: arguments if len > 1

border-bottom()
  len = length(arguments)
  border-bottom: 0 if arguments == 0
  border-bottom: 1px solid arguments if len == 1 && arguments != 0
  border-bottom: arguments if len > 1

border-left()
  len = length(arguments)
  border-left: 0 if arguments == 0
  border-left: 1px solid arguments if len == 1 && arguments != 0
  border-left: arguments if len > 1

border-right()
  len = length(arguments)
  border-right: 0 if arguments == 0
  border-right: 1px solid arguments if len == 1 && arguments != 0
  border-right: arguments if len > 1


// ==========================================================================
// 2.9 Background-clip
//
// Adjust background-clip based on simplifed declaration. `Border` is browser
// default. Older Mozilla does not use suffix of `-box`, Webkit and IE do.
// See http://www.css3files.com/background/#backgroundclip
//
// Does not work in IE 8 or below, Fx 3.6 requires -moz-, Opera 10 requires -o-
//
// @type - `padding`, `border`, `content`. Defaults to `padding`
// @prefix - Boolean, Sets additional declaration for older Mozilla
//
//
background-clip(type = "padding", prefix = null)
  if prefix
    -moz-background-clip: type

  background-clip: s("%s-box", type)



// ==========================================================================
// 2.10 Box-size
//
// Typically used to change box model to border model, which intrinsically makes
// more sense when developing responsively. Used in the reset rules to apply
// this rule to every element.
//
// Does not work in IE7 or below. Why does Mozilla still need prefix? Who knows.
//
// @arg - other box model. Defaults to `border`
//
//
box-size(  )
  if 0 == length(arguments)
    box = border-box
  else
    box = s("%s-box", arguments)

  -moz-box-sizing: box
  box-sizing: box


// ==========================================================================
// 2.11 Font-size
//
// Converts font-size to output rem value. Best when base font-size set to
// % value of 62.5%, where 62.5% most commonly equates to 10px. If value is
// given with a unit type, then retain unit value instead
//
// @size_value - size based on pixels
//
//
font-size( size_value )
  font-size: rem(size_value)



// ==========================================================================
// 2.12 Line-height
//
// Converts line-height to output rem value. Best when base font-size set to
// % value of 62.5%, where 62.5% most commonly equates to 10px. If value is
// given with a unit type, then retain unit value instead
//
// @size_value - size based on pixels
//
//
line-height( size_value )
  line-height: rem(size_value)



// ==========================================================================
// 2.12 Edges
//
// overload top/bottom/left/right to produce REM values from PX values. If a PCT
// is assigned, will not be converted to REMs. Declaration follows how padding,
// margin, et al are decalred
//
// @args - pixel values for each edge
//
// Examples:
//
//    edges: 0 // return top: 0; right: 0; bottom: 0; left: 0;
//    edges: 0 10px // return top: 0; right: 1rem; bottom: 0; left: 1rem;
//    edges: 0 10px 5px // return top: 0; right: 1rem; bottom: .5rem; left: 1rem;
//    edges: 1px 10px 5px // return top: .1rem; right: 1rem; bottom: .5rem; left: 1rem;
//
//
edges(args...)
  if length(args) == 1
    top: rem(args[0])
    right: rem(args[0])
    bottom: rem(args[0])
    left: rem(args[0])

  if length(args) == 2
    top: rem(args[0])
    right: rem(args[1])
    bottom: rem(args[0])
    left: rem(args[1])

  if length(args) == 3
    top: rem(args[0])
    right: rem(args[1])
    bottom: rem(args[2])
    left: rem(args[1])

  if length(args) == 4
    top: rem(args[0])
    right: rem(args[1])
    bottom: rem(args[2])
    left: rem(args[3])