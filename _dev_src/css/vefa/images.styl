// 9.0 Images
// The following mixins are used for images and CSS image creation


// ==========================================================================
// 9.1 Image replacement
// 
// Replace content with a backgroud image. Newer IR function based on
// HTML5 Boilerplate
//// 9.0 Images
// The following mixins are used for images and CSS image creation


// ==========================================================================
// 9.1 Image replacement
// 
// Replace content with a backgroud image. Newer IR function based on
// HTML5 Boilerplate
//
//
ir()
  font: 0/0 a
  text-shadow: none
  color: transparent
  background-color: transparent
  border: 0



// ==========================================================================
// 9.2 16:9 Responsive background image
//
//
bkg-16x9( img )
  responsive-bkg-img( img, 56.25% ) //16:9



// ==========================================================================
// 9.3 4:3 Responsive background image
//
// 
bkg-4x3( img )
  responsive-bkg-img( img, 75% ) //4:3



// ==========================================================================
// 9.4 Responsive background image
//
//
responsive-bkg-img( img, size )
  background url(img) no-repeat center center
  background-size cover
  height 0
  padding-bottom size



// ==========================================================================
// 9.5 Unicode Triangles
// 
// For use with pseudo elements as icons or glyphs
//
// @direction (str) - define direction arrow points: top, right, bottom, left
// @opt (int) - define unicode arrow element style
// 
//  Example:
//
//    .element_class::before
//      triangle(right, 1)
//
//    .element_class:hover::before
//      triangle(down, 2)
//
//
uni-triangle(direction, opt)
  if direction == "left"
    content: "\25C0" if opt == 1 // BLACK LEFT-POINTING TRIANGLE
    content: "\25C1" if opt == 2 // WHITE LEFT-POINTING TRIANGLE
    content: "\25C2" if opt == 3 // BLACK LEFT-POINTING SMALL TRIANGLE
    content: "\25C3" if opt == 4 // WHITE LEFT-POINTING SMALL TRIANGLE

  if direction == "right"
    content: "\25B6" if opt == 1 // BLACK RIGHT-POINTING TRIANGLE
    content: "\25B7" if opt == 2 // WHITE RIGHT-POINTING TRIANGLE
    content: "\25B8" if opt == 3 // BLACK RIGHT-POINTING SMALL TRIANGLE
    content: "\25B9" if opt == 4 // WHITE RIGHT-POINTING SMALL TRIANGLE

  if direction == "top"
    content: "\25B2" if opt == 1 // BLACK UP-POINTING TRIANGLE
    content: "\25B3" if opt == 2 // WHITE UP-POINTING TRIANGLE
    content: "\25B4" if opt == 3 // BLACK UP-POINTING SMALL TRIANGLE
    content: "\25B5" if opt == 4 // WHITE UP-POINTING SMALL TRIANGLE

  if direction == "bottom"
    content: "\25BC" if opt == 1 // BLACK DOWN-POINTING TRIANGLE
    content: "\25BD" if opt == 2 // WHITE DOWN-POINTING TRIANGLE
    content: "\25BE" if opt == 3 // BLACK DOWN-POINTING SMALL TRIANGLE
    content: "\25BF" if opt == 4 // WHITE DOWN-POINTING SMALL TRIANGLE

  if direction == "top-left"
    content: "\25F8" if opt == 1 // UPPER LEFT TRIANGLE
    content: "\25E4" if opt == 2 // BLACK UPPER LEFT TRIANGLE

  if direction == "top-right"
    content: "\25F9" if opt == 1 // UPPER RIGHT TRIANGL
    content: "\25E5" if opt == 2 // BLACK UPPER RIGHT TRIANGLEE

  if direction == "bottom-left"
    content: "\25FA" if opt == 1 // LOWER LEFT TRIANGLE
    content: "\25E3" if opt == 2 // BLACK LOWER LEFT TRIANGLE

  if direction == "bottom-right"
    content: "\25FF" if opt == 1 // LOWER RIGHT TRIANGLE
    content: "\25E2" if opt == 2 // BLACK LOWER RIGHT TRIANGLE


// ==========================================================================
// 9.6 CSS Triangles
// 
// For use with pseudo elements as icons or glyphs
//
// @direction (str) - define direction arrow points: top, right, bottom, left
// @bw (int) - border width. No unit required.
// @bc (color) - arrow color 
//
//  Example:
//
//    .element_class::before
//      triangle(right, 5, #000)
//
//    .element_class:hover::before
//      triangle(down, 5, #000)
//
//
left-arrow(direction=left, bw=4px, bc=#333)
  border-color: transparent bc transparent transparent
  border-style: solid
  border-width: rem(unit(bw, "px"))
  transform-origin: 75% 50%

  if direction == "right"
    transform: rotate(180)

  if direction == "top"
    transform: rotate(-90)

  if direction == "bottom"
    transform: rotate(90)
//
ir()
  font: 0/0 a
  text-shadow: none
  color: transparent
  background-color: transparent
  border: 0



// ==========================================================================
// 9.2 16:9 Responsive background image
//
//
bkg-16x9( img )
  responsive-bkg-img( img, 56.25% ) //16:9



// ==========================================================================
// 9.3 4:3 Responsive background image
//
// 
bkg-4x3( img )
  responsive-bkg-img( img, 75% ) //4:3



// ==========================================================================
// 9.4 Responsive background image
//
//
responsive-bkg-img( img, size )
  background url(img) no-repeat center center
  background-size cover
  height 0
  padding-bottom size



// ==========================================================================
// 9.5 Unicode Triangles
// 
// For use with pseudo elements as icons or glyphs
//
// @direction (str) - define direction arrow points: top, right, bottom, left
// @opt (int) - define unicode arrow element style
// 
//  Example:
//
//    .element_class::before
//      triangle(right, 1)
//
//    .element_class:hover::before
//      triangle(down, 2)
//
//
uni-triangle(direction, opt)
  if direction == "left"
    content: "\25C0" if opt == 1 // BLACK LEFT-POINTING TRIANGLE
    content: "\25C1" if opt == 2 // WHITE LEFT-POINTING TRIANGLE
    content: "\25C2" if opt == 3 // BLACK LEFT-POINTING SMALL TRIANGLE
    content: "\25C3" if opt == 4 // WHITE LEFT-POINTING SMALL TRIANGLE

  if direction == "right"
    content: "\25B6" if opt == 1 // BLACK RIGHT-POINTING TRIANGLE
    content: "\25B7" if opt == 2 // WHITE RIGHT-POINTING TRIANGLE
    content: "\25B8" if opt == 3 // BLACK RIGHT-POINTING SMALL TRIANGLE
    content: "\25B9" if opt == 4 // WHITE RIGHT-POINTING SMALL TRIANGLE

  if direction == "top"
    content: "\25B2" if opt == 1 // BLACK UP-POINTING TRIANGLE
    content: "\25B3" if opt == 2 // WHITE UP-POINTING TRIANGLE
    content: "\25B4" if opt == 3 // BLACK UP-POINTING SMALL TRIANGLE
    content: "\25B5" if opt == 4 // WHITE UP-POINTING SMALL TRIANGLE

  if direction == "bottom"
    content: "\25BC" if opt == 1 // BLACK DOWN-POINTING TRIANGLE
    content: "\25BD" if opt == 2 // WHITE DOWN-POINTING TRIANGLE
    content: "\25BE" if opt == 3 // BLACK DOWN-POINTING SMALL TRIANGLE
    content: "\25BF" if opt == 4 // WHITE DOWN-POINTING SMALL TRIANGLE

  if direction == "top-left"
    content: "\25F8" if opt == 1 // UPPER LEFT TRIANGLE
    content: "\25E4" if opt == 2 // BLACK UPPER LEFT TRIANGLE

  if direction == "top-right"
    content: "\25F9" if opt == 1 // UPPER RIGHT TRIANGL
    content: "\25E5" if opt == 2 // BLACK UPPER RIGHT TRIANGLEE

  if direction == "bottom-left"
    content: "\25FA" if opt == 1 // LOWER LEFT TRIANGLE
    content: "\25E3" if opt == 2 // BLACK LOWER LEFT TRIANGLE

  if direction == "bottom-right"
    content: "\25FF" if opt == 1 // LOWER RIGHT TRIANGLE
    content: "\25E2" if opt == 2 // BLACK LOWER RIGHT TRIANGLE


// ==========================================================================
// 9.6 CSS Triangles
// 
// For use with pseudo elements as icons or glyphs
//
// @direction (str) - define direction arrow points: top, right, bottom, left
// @bw (int) - border width. No unit required.
// @bc (color) - arrow color 
//
//  Example:
//
//    .element_class::before
//      triangle(right, 5, #000)
//
//    .element_class:hover::before
//      triangle(down, 5, #000)
//
//
left-arrow(direction=left, bw=4px, bc=#333)
  border-color: transparent bc transparent transparent
  border-style: solid
  border-width: rem(unit(bw, "px"))
  transform-origin: 75% 50%

  if direction == "right"
    transform: rotate(180)

  if direction == "top"
    transform: rotate(-90)

  if direction == "bottom"
    transform: rotate(90)