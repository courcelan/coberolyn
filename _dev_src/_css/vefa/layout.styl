// 5.0 Layout Helpers
// Vefa's reset() strips all margin and padding from elements. Class-based
// paddings and margins enable you to micro-organize and layout elements
// based on consistent derivatives of the base line-height. Practices OOCSS.
//
// These can be called in a group and output as classes, or you can use
// single function to mixin desired derivative. 
//
// Value derivatives are based off of percentage of base line-height. You can
// customize values through declaration. Giving a percentage of 100 assigns the
// base line-height and does not append a suffix to the class


// ==========================================================================
// 5.1 grid-module
// 
// Where the magic happens. Called on all elements in Vefa reset(), converts
// items into `inline-block` for use in system. Helps for aligning to horizontal
// and vertical grid
//
// @auto_size (boolean) - determines where items should have 100% width, like a
//    block element, or auto width like an inline element
//
//
grid-module(auto_size = true)
  display: inline-block
  position: relative
  width: auto if auto_size
  width: 100% unless auto_size
  vertical-align: top
  text-align: left



// ==========================================================================
// 5.2 Padding
//
// Add padding to elements. Creates classes based on:
//    xy - padding-left, padding-right, padding-top, and padding-bottom
//    x - padding-left and padding-right
//    y - padding-top and padding-bottom
//    above - padding-top
//    below - padding-bottom
//    before - padding-left
//    after - padding-right
//    flush - clears out paddings
//
//  Caveat:
//    It is not recommended to use `before`/`after` and instead give equal
//    weight to both sides for consistency/simplicity. If engaged in horizontal
//    grouping, use CSS selector of `:first-child`, `:last-child`, or
//    `:nth-child` to remove or add padding to initial or last elements. This
//    will save you time and thought when developing your template logic
//
//
padding = {
  "xy": "padding",
  "x": "padding-left" "padding-right",
  "y": "padding-top" "padding-bottom",
  "flush": "padding",
  "above": "padding-top",
  "below": "padding-bottom"
  "before": "padding-left"
  "after": "padding-right"
}



// ==========================================================================
// 5.2.1 Include padding in developer defined elements
//
// Add padding to developer-defined elements, rather than using OOCSS.
//
//  @type (str) - xy, x, y, flush, above, below, before, after
//  @percentage (int) - percentage of base line-height to apply
//
//  Caveat:
//    Not recommended to use `flush` here. Instead, just declare `padding: 0` in
//    your class.
//
//  Example:
//    (based off of base line-height of 20px)
//
//    .element_class
//      pad(x, 50)
//
//    .element_class
//      padding-left: 10px
//      padding-right: 10px
//
//    .element_class2
//      pad(y, 400)
//
//    .element_class2
//      padding-top: 80px
//      padding-bottom: 80px
//
//
pad(type, percentage)
  m = join("", type)
  modifier = blh * (percentage / 100)
  
  for value in padding[m]
    {value}: floor(modifier)



// ==========================================================================
// 5.2.2 OOCSS padding definitions
//
// Add padding in an OOCSS way.
//
//  @type (arr) - list of xy, x, y, flush, above, below, before, after
//  @arr (arr) - list of percentages of base line-height to apply
//  @namespace (str)- prefix a namespace for classes
//
//  Example:
//    (based off of base line-height of 20px)
//
//    base_pad(x y xy, 10 50 100, u)
//
//    .u-pad-x10
//      padding-left: 2px
//      padding-right: 2px
//
//    .u-pad-x50
//      padding-left: 10px
//      padding-right: 10px
//
//    .u-pad-x
//      padding-left: 20px
//      padding-right: 20px
//
//    .u-pad-y10
//      padding-top: 2px
//      padding-bottom: 2px
//
//    .u-pad-y50
//      padding-top: 10px
//      padding-bottom: 10px
//
//    .u-pad-y
//      padding-top: 20px
//      padding-bottom: 20px
//
//    .u-pad-xy10
//      padding: 2px
//
//    .u-pad-xy50
//      padding: 10px
//
//    .u-pad-xy
//      padding: 2px
//
//
base_pad(type, arr, namespace=null)
  /* cycle through type declarations */
  /* special usage for `flush` */
  /* cycle through percentages that need apply */
  /* create the class with its associated values */
  namespace = "#{namespace}-" if namespace
  namespace = "" unless namespace

  for value in type
    value = join("", value)
        
    if value is "flush"
      .{namespace}pad-{value}
        for value in padding[value]
          {value}: 0
        
    else
      for member in arr
        mod = "" if member is 100
        mod = floor(member) unless member is 100
        modifier = blh * (member / 100)
       
        .{namespace}pad-{value}{mod}
          for value in padding[value]
            {value}: floor(modifier)



// ==========================================================================
// 5.3 Margin
//
// Add margin to elements. Creates classes based on:
//    xy - margin-left, margin-right, margin-top, and margin-bottom
//    x - margin-left and margin-right
//    y - margin-top and margin-bottom
//    above - margin-top
//    below - margin-bottom
//    before - margin-left
//    after - margin-right
//    flush - clears out margin
//    center - centers element in container
//
//  Caveat:
//    It is not recommended to use `before`/`after` and instead give equal
//    weight to both sides for consistency/simplicity. If engaged in horizontal
//    grouping, use CSS selector of `:first-child`, `:last-child`, or
//    `:nth-child` to remove or add margin to initial or last elements. This
//    will save you time and thought when developing your template logic
//
//
margin = {
  "xy": "margin"
  "x": "margin-left" "margin-right",
  "y": "margin-top" "margin-bottom",
  "above": "margin-top",
  "below": "margin-bottom",
  "before": "margin-left"
  "after": "margin-right"
  "flush": "margin",
  "center": "margin-left" "margin-right"
}



// ==========================================================================
// 5.3.1 Include margin in developer defined elements
//
// Add margin to developer-defined elements, rather than using OOCSS.
//
//  @type (str) - xy, x, y, flush, above, below, before, after, center
//  @percentage (int) - percentage of base line-height to apply
//
//  Caveat:
//    Not recommended to use `flush` here. Instead, just declare `margin: 0` in
//    your class. Not recommended to use `center` here. Instead, just declare
//    `margin: 0 auto` in your class.
//
//  Example:
//    (based off of base line-height of 20px)
//
//    .element_class
//      space(x, 50)
//
//    .element_class
//      margin-left: 10px
//      margin-right: 10px
//
//    .element_class2
//      space(y, 400)
//
//    .element_class2
//      margin-top: 80px
//      margin-bottom: 80px
//
//
space(type, percentage)
  m = join("", type)
  modifier = blh * (percentage / 100)
  
  for value in margin[m]
    {value}: floor(modifier)


// ==========================================================================
// 5.3.2 OOCSS margin definitions
//
// Add margin in an OOCSS way.
//
//  @namespace (str)- prefix a namespace for classes
//  @type (arr) - list of xy, x, y, flush, above, below, before, after, center
//  @arr (arr) - list of percentages of base line-height to apply
//
//  Example:
//    (based off of base line-height of 20px)
//
//    base_space(u, x y center, 10 50 100)
//
//    .u-space-x10
//      margin-left: 2px
//      margin-right: 2px
//
//    .u-space-x50
//      margin-left: 10px
//      margin-right: 10px
//
//    .u-space-x
//      margin-left: 20px
//      margin-right: 20px
//
//    .u-space-y10
//      margin-top: 2px
//      margin-bottom: 2px
//
//    .u-space-y50
//      margin-top: 10px
//      margin-bottom: 10px
//
//    .u-space-y
//      margin-top: 20px
//      margin-bottom: 20px
//
//    .u-space-center
//      margin-left: auto
//      margin-right: auto
//
//
base_space(type, arr, namespace=null)
  // cycle through type declarations
  // special usage for `center`
  // special usage for `flush`
  // cycle through percentages that need apply
  // create the class with its associated values
  namespace = "#{namespace}-" if namespace
  namespace = "" unless namespace

  for value in type
    value = join("", value)
        
    if value is "center"
      .{namespace}space-{value}
        for value in margin[value]
          {value}: auto
    else
      if value is "flush"
        .{namespace}-space-{value}
          for value in margin[value]
            {value}: 0
  
      else
        for member in arr
          mod = "" if member is 100
          mod = floor(member) unless member is 100
          modifier = blh * (member / 100)
          
          .{namespace}space-{value}{mod}
            for value in margin[value]
              {value}: floor(modifier)



// ==========================================================================
// 5.4 Proportions (Grids)
//
// Create a grid system based on even or uneven modules. Custom defined
// percentage based and declared via a stylus hash. Margins are not used in
// declarations. Please use internal padding or define extra modules as useable
// margins. 
//
//  `hash_name` = {
//    @id (str)   
//        prefix to prepend to each class. Enables you to create
//        customized gridsets that don't get in the way of each other.
//        Particularly useful when dealing with breakpoints and
//        responsive designs
//    @modules (int) -
//        only required for even width grids. defines how many grid modules
//        are to be defined. (TODO - create introspection to find out based
//        solely on giving width value)
//    @widths (arr) -
//        array of given (prefix free) percentages adding up to 100%. It's not
//        required to add completely to 100 percent, and this will leave space 
//        to the right (TODO - create ability to define pixel values and get 
//        correct percentage widths from those)
//
//



// ==========================================================================
// 5.4.1 Extend gridset
//
// Defines appropriate grid module based on given arguments. Rather than create 
// many (possibly) unneeded grid module combinations, you use `extend_gridset`
// to create only those module cominations that you require. You create one off 
// modules as well when using a lamda hash. Used internally for grid creation.
//
// `ex_g(hash, modules)` is provided as syntatic sugar to reduce typing
//
// @hash (obj) - defined grid hash. You can supply a lamda hash as well
// @modules (range) - order and number of modules to use
//
// Examples:
//
//  ex = {
//    modules: 4
//    widths: 25
//  }
//
//    .grid_class
//      width: extend_gridset(ex, 1)
//
//    .grid_class
//      width: 25%
//
//    .grid_class2
//      width: extend_gridset(ex, 1..3)
// 
//    .grid_class2
//      width: 75%
//
//    .grid_class3
//      width: extend_gridset(ex, 2..3)
// 
//    .grid_class3
//      width: 50%
//
// (TODO) - Add introspection to enable users to assign like a regular CSS prop
//
extend_gridset(hash, modules)
  module = 0
  for value in modules
    value = value - 1
    module = module + hash.widths[value]

  return unit(module, "%")

ex_g(hash, modules)
  return extend_gridset(hash, modules)



// ==========================================================================
// 5.4.2 Base gridset
//
// Defines grid modules from supplied hash argument. Under a given id namespace,
// grid classes are output for widths (fill), left offset (pushBy), right offset
// (pullBy).
// 
// For even grids, a class is created as:
//    .{namespace}-fill{current module}_{total number of modules}
//    .u-fill1_4
//
//    .{namespace}-pushBy{current module}_{total number of modules}
//    .u-pushBy1_4
//
//    .{namespace}-fill{current module}_{total number of modules}
//    .u-pullBy1_4
// 
// `g(hash)` is provided as syntatic sugar to reduce typing
//
// @hash (obj) - defined grid hash. You can supply a lamda hash as well
//
//  ex = {
//    id: "ex"
//    modules: 4
//    widths: 15 35 35 15
//  }
//
//  base_gridset(ex)
//
//  .ex-fill1
//    width: 15%
//
//  .ex-fill2
//    width: 35%
//
//  .ex-fill3
//    width: 35%
//
//  .ex-fill4
//    width: 15%
//
//  .ex-pushBy1
//    left: 15%
//
//  .ex-pushBy2
//    left: 50%
//
//  .ex-pushBy3
//    left: 85%
//
//  .ex-pullBy1
//    right: 15%
//
//  .ex-pullBy2
//    right: 50%
//
//  .ex-pullBy3
//    right: 85%
//
//
base_gridset(hash)
  _base_gridset(hash)

g(hash)
  base_gridset(hash)



// ==========================================================================
// function to create base gridset and extend as needed.
_base_gridset(hash)
  hash.id = "{hash.id}-" if hash.id
  hash.id = "" unless hash.id

  i = 1
  width_length = length(hash.widths) /* get the defined module widths */
  
  // for equal modules  
  if width_length is 1 and hash.modules
    for num in 1..hash.modules
      w = unit((hash.widths * num), "%")
      
      if i isnt hash.modules
        .{hash.id}fill{i}_{hash.modules}
          width: ex_g(hash, 1)*i

        .{hash.id}pull{hash.modules - i}_{hash.modules}
          right: ex_g(hash, 1)*(hash.modules - i)
    
        .{hash.id}push{i}_{hash.modules}
          left: ex_g(hash, 1)*i

      i = i +  1

  // for uneven modules
  if width_length > 1
    for w in hash.widths
      .{hash.id}fill{i}
        width: ex_g(hash, i)

      .{hash.id}offset{i}
        left: ex_g(hash, i)      
      
      if i isnt 1 and ceil(ex_g(hash, 1..i)) isnt "100%"
        .{hash.id}pull{length(hash.widths) - i}
          right: ex_g(hash, i...length(hash.widths))
        
        .{hash.id}push{i}
          left: ex_g(hash, 1..i)
      
      if i is 1
        .{hash.id}pull{length(hash.widths) - i}
          right: ex_g(hash, i...length(hash.widths))

      i = i +  1