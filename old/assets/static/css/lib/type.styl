// font-size
// converts font-size to output pixel value and rem value
// this is based off of a font-size % value of 62.5%, where62.5% most commonly equates to 10px
// if value is given with a unit type, then retain unit value instead
//
// @var
// sizeValue: size based on pixels
//
//
font-size( size_value )
  font-size: rem(size_value)


////////////////////////////////////////////////////////////////////////////////


line-height( size_value )
  line-height: rem(size_value)


////////////////////////////////////////////////////////////////////////////////

// ellipsis
// create ellipsis for lengthy text
// see: http://www.quirksmode.org/css/textoverflow.html
ellipsis()
  overflow: hidden
  text-overflow: ellipsis
  white-space: nowrap


////////////////////////////////////////////////////////////////////////////////


// hyphens
// hyphenate words in content block
hyphens()
  vendor("hyphens", "auto")
  word-wrap: break-word


////////////////////////////////////////////////////////////////////////////////


// font-face
// load a font-face with a FontSpring bulletproof font declaration
//
// @var
// font: user defined font family name to be called
// file: the file and its location. no file type
// type: otf or ttf
// woff: declares whether woff is included in markup (if not available, best to remove it because of 404 errors)
font-load( font_name = 'FF1', file, type = 'otf', woff = true)
  @font-face
    font-family: font_name
    src: url( file +'.eot' ) //IE9 Compat
    // if woff
    src: url( file +'.eot?' ) format("embedded-opentype"), url( file +'.woff' ) format("woff"), url( file +'.otf' ) format("opentype") if type is 'otf' && woff is true
    src: url( file +'.eot?' ) format("embedded-opentype"), url( file +'.woff' ) format("woff"), url( file +'.ttf' ) format("truetype") if type is 'ttf' && woff is true
    // if no woff
    src: url( file +'.eot?' ) format("embedded-opentype"), url( file +'.otf' ) format("opentype") if type is 'otf' && woff is false
    src: url( file +'.eot?' ) format("embedded-opentype"), url( file +'.ttf' ) format("truetype") if type is 'ttf' && woff is false


////////////////////////////////////////////////////////////////////////////////


// default font stacks
// per http://unitinteractive.com/blog/2008/06/26/better-css-font-stacks/
arial = Arial, "Helvetica Neue", Helvetica, sans-serif
baskerville = Baskerville, times
baskervilleTitle = Baskerville, Times, "Times New Roman", serif
cambria = Cambria, georgia
centurygothic = "Century Gothic", "Apple Gothic", sans-serif
consolas = Consolas, "Lucida Console", monaco
copperplate = "Copperplate", "Copperplate Gothic Light", serif
courier = "Courier New", Courier, monospace
franklin = "Franklin Gothic Medium", "Arial Narrow Bold", arial
futura = Futura, centurygothic
garamond = Garamond, "Hoefler Text", times
garamondTitle = Garamond, "Hoefler Text", Palatino, "Palatino Linotype", serif
geneva = Geneva, lucidasans
genevaTitle = Geneva, Verdana, lucidasans
georgia = Georgia, Palatino, "Palatino Linotype", times
georgiaTitle = Georgia, times
gillsans = "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif
gillsansTitle = "Gill Sans", "Gill Sans MT", "Trebuchet MS", Calibri, sans-serif
gillsansBold = "GillSans-Bold", "Gill Sans MT-Bold", Calibri, "Trebuchet MS", sans-serif
helvetica = "Helvetica Neue", Arial, Helvetica, sans-serif
helveticaTitle = Helvetica, "Helvetica Neue", Arial, sans-serif
impact = Impact, Haettenschweiler, "Arial Narrow Bold", sans-serif
lucidasans = "Lucida Sands", "Lucida Grande", "Lucida Sans Unicode", sans-serif
monaco = Monaco, courier
palatino = Palatino, "Palatino Linotype", georgiaTitle
palatinoTitle = Palatino, "Palatino Linotype", "Hoefler Text", times
tahoma = Tahoma, Geneva, Verdana
tahomaTitle = Tahoma, Verdana, Geneva
times = "Times New Roman", Times, serif
trebuchet = "Trebuchet MS", lucidasans
trebuchetTitle = "Trebuchet MS", Tahoma, Arial, sans-serif
verdana = Verdana, Geneva, Tahoma, sans-serif
verdanaTitle = Verdana, Tahoma, Geneva, sans-serif