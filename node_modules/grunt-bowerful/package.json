{
  "name": "grunt-bowerful",
  "description": "Specify bower packages directly in grunt file.",
  "version": "0.3.0",
  "homepage": "https://github.com/gyllstromk/grunt-bowerful",
  "author": {
    "name": "Karl Gyllstrom",
    "email": "karl.gyllstrom@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gyllstromk/grunt-bowerful.git"
  },
  "bugs": {
    "url": "https://github.com/gyllstromk/grunt-bowerful/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/gyllstromk/grunt-bowerful/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-bowerful": "bin/grunt-bowerful"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "bower": "~0.9.2"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.6"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-bowerful\n\nThis grunt plugin enables you to install + concat bower packages directly from grunt file, *without* needing a seperate `component.json`/`bower.json` file. Bower packages are specified directly within the grunt file itself.\n\nBy default, files are concatenated and written to the `dest` location according to type. For example, all `.js` files are concatenated to `<dest>/<destfile>.js`. Importantly, the *order* of concatenation is based on the dependency structure indicated by the bower component files. For example, if component X relies on jQuery, X will be included in the file *after* jQuery.\n\n## Getting Started\n\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-bowerful`\n\nThen add this to your project's `Gruntfile.js`:\n\n```js\ngrunt.initConfig({\n    bowerful: {\n        dist: {\n            /**\n                @packages (required) -> object of `package name: package version`\n                key/value pairs. Version can be left blank.\n            */\n\n            packages: {\n                bootstrap: '~2.2.1',\n                jquery: '', // when version not specified, most recent will be\n                            // used\n                handlebars: {\n                    // use the 'select' field to indicate the particular files\n                    // to be used. Otherwise, all files specified in the `main`\n                    // field of the package's `component.json` (or, failing\n                    // that, `package.json`) file will be used. This may be\n                    either a `String` or `Array`\n\n                    select: [ 'handlebars.js' ],\n\n                    // additionally, use the `exclude` field to indicate files\n                    // you *do not* wish to include in the concatenated\n                    // version. This may be either a `String` or `Array`\n\n                    exclude: [ 'handlebars.runtime.js' ],\n                    version: '~1.0.0-rc.3'\n                },\n\n                ember: '~1.0.0-pre.2'\n            },\n\n            /**\n                store (optional) -> path where components are installed. defaults\n                to 'components'\n            */\n\n            store: 'components',\n\n            /**\n                dest (optional) -> directory where files will be merged. Merged\n                files take the form:\n\n                    assets[.extension] = { merged files of extension type }\n\n                e.g. all JS from bower packages will end up in assets.js; all css in assets.css\n\n                Files are merged according to dependency rules, such that a file is\n                concatenated after files upon which it depends.\n            */\n\n            dest: 'public',\n\n            /**\n                destfile (optional) -> filename that will be used when files are merged. Merged\n                files will default to 'assets' \n            */\n\n            destfile: 'assets',\n\n            /**\n                customtarget (optional) -> file targets can be manually specified. \n\n                string - fullpath string without any extenstion, this will be added automaticly.\n\n                key/value pairs. - fullpath string with extensions, extensions can be overwritten. \n                eg: Changing ext to something else, example '.less' or '.scss' \n            */\n\n            customtarget: { \n                // this will generate jquery.js and jquery.css files if they exist on package\n                jquery: 'web/js/vendor/jquery', \n                // note that you can overwrite the filename and extension to anything else.\n                otherlib: {\n                    js: 'path/to/destination.js',\n                    css: 'path/to/destination.scss'\n                }\n            }\n        }\n    }\n```\n\nAnd import tasks via:\n\n```js\ngrunt.loadNpmTasks('grunt-bowerful');\n```\n\n[grunt]: http://gruntjs.com/\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\n\n## Contributers\n\n* @mitermayer\n* @johannestroeger\n\n## License\nCopyright (c) 2012 Karl Gyllstrom  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-bowerful@0.3.0",
  "_from": "grunt-bowerful@~0.3.0"
}
